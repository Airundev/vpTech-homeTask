apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        testInstrumentationRunner "com.android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "SEARCH_VIEW_INITIAL_WORD", "\"Interview\"")
        buildConfigField("int", "PAGE_SIZE", "10")
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        debugProguard {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation project(':dagger.addons')
    implementation project(':features:detail')
    implementation project(path: ':features:favorites')
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.61'
    //glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glide"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glide"

    //dagger
    implementation "com.google.dagger:dagger:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation("com.google.dagger:dagger-android-support:$rootProject.dagger")
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    //architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycle"

    //support library
    implementation "androidx.appcompat:appcompat:$rootProject.supportLibraryVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.supportLibraryVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayout"
    implementation "com.google.android.material:material:$rootProject.supportLibraryVersion"

    //api
    api "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.google.code.gson:gson:$rootProject.gson"

    //test
    testImplementation "org.assertj:assertj-core:3.11.1"
    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:3.1.0"
    testImplementation "com.squareup.retrofit2:retrofit-mock:$rootProject.retrofit"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0-alpha03'
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.4.0"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'com.squareup.retrofit2:retrofit-mock:2.4.0'
    implementation 'com.squareup.retrofit2:retrofit-mock:2.4.0'


    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-jackson:2.6.2'
    implementation 'com.squareup.okhttp:okhttp:2.7.0'

    implementation 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta1'
    implementation 'com.squareup.retrofit:converter-gson:2.0.0-beta1'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
}
